"""
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
"""

class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        nums.sort()
        re_list=[]
        if len(nums)<3:
            return re_list
        
        for i in xrange(len(nums)-2):
            if i > 0 and nums[i] == nums[i-1]:
                continue
            l=i+1
            e=len(nums)-1
            while l<e:
                three_sum=nums[i]+nums[l]+nums[e]
                if three_sum>0:
                    e=e-1
                elif three_sum<0:
                    l=l+1
                else :
                    re_list.append([nums[i],nums[l],nums[e]])
                    while l<e and nums[l]==nums[l+1]:
                        l=l+1
                    while l<e and nums[e]==nums[e-1]:
                        e=e-1
                    l=l+1;e=e-1
        return re_list
